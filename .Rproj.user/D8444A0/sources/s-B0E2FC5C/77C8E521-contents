install.packages("tidyverse")
install.packages("dslabs")
library(tidyverse)
library(dslabs)
if(!exists("mnist")) mnist <- read_mnist()

class(mnist$train$images)

x <- mnist$train$images[1:1000,] 
y <- mnist$train$labels[1:1000]

length(x[,1])
x_1<- 1:5
x_2 <- 6:10
cbind(x_1,x_2)
dim(x)
dim(x_1)
dim(as.matrix(x_1))
dim(x)

# converting a vector to a matrix
my_vector <- 1:15

# fill the matrix by column
mat <- matrix(my_vector, 5, 3)
mat

#fill by row
mat_t <- matrix(my_vector, 3, 5, byrow = TRUE)
mat_t
# t transpose a matrix
identical(t(mat), mat_t)
# matrix function recycles values in the vector 
# without warning if the product of columns and rows 
# does not match the length of the vector
matrix(my_vector, 5, 5)
grid <- matrix(x[3,], 28, 28)
image(1:28, 1:28, grid)

# flip the image back
image(1:28, 1:28, grid[, 28:1])


#Row and Column Summaries and Apply

sums <- rowSums(x)
avg <- rowMeans(x)

data_frame(labels = as.factor(y), row_averages = avg) %>%
  qplot(labels, row_averages, data = ., geom = "boxplot")
# 1 for rows
avgs <- apply(x,1,mean)
# 2 for columns
sds <- apply(x,2,sd)

# Filtering Columns Based on Summaries
install.packages("matrixStats")
library(matrixStats)

sds <- colSds(x)
qplot(sds, bins = "30", color = I("black"))
image(1:28, 1:28, matrix(sds, 28,28)[, 28:1])

#extract columns and rows
x[ ,c(351,352)]
x[c(2,3),]
new_x <- x[ ,colSds(x) > 60]
dim(new_x)
class(x[,1])
# if you select only one column or only one row, 
#the result is no longer a matrix but a vector
dim(x[1,])

#preserve the matrix class
class(x[ , 1, drop=FALSE])
dim(x[, 1, drop=F])

# Indexing with Matrices and Binarizing the Data
#We can use logical operations with matrices:
mat <- matrix(1:15, 5, 3)
mat[mat >6 & mat <12] <- 0
mat

#We can also binarize the data using just matrix operations:
bin_x <- x
bin_x[bin_x < 255/2] <- 0
bin_x[bin_x > 255/2] <- 1

#index with matrices
mat <- matrix(1:15, 5, 3)
as.vector(mat)
qplot(as.vector(x), bins = 30, color = I("black"))
new_x <- x
new_x[new_x < 50] <- 0

mat <- matrix(1:15, 5, 3)
mat[mat < 3] <- 0
mat

#Vectorization for Matrices and Matrix Algebra Operations
#scale each row of a matrix
(x - rowMeans(x)) / rowSds(x)

#scale each column (different that scaling rows)
#transpose a matrix then transpose it back
t(t(x) - colMeans(x))

#take each entry of a vector and subtracts it from the corresponding row or column
x_mean_0 <- sweep(x, 2, colMeans(x))

#divide by the standard deviation
x_mean_0 <- sweep(x, 2, colMeans(x))
x_standardized <- sweep(x_mean_0, 2, colSds(x), FUN = "/")


###Assessment
#1
xwe <- matrix(rnorm(10*100),100,10)
dim(xwe)

#2
nrow(xwe)
ncol(xwe)

#3
xw1 <- sweep(xwe,1,1:nrow(xwe),"+")
xw2 <- xwe + seq(nrow(xwe))
identical(xw1,xw2)

#4
xw3 <- sweep(xwe, 2, 1:ncol(xwe), FUN = "+")

#6
library(dslabs)
if(!exists("mnist")) mnist <- read_mnist()
labels(mnist)
labels(mnist$train)
labels(mnist$train$images)
pixels <- mnist$train$images
grey<-length(pixels[between(pixels,51,204)])
total<-length(as.vector(pixels))
grey/total

# proportion of each row
greyprop <- rowMeans(pixels >50 & pixels < 205)
qplot(as.factor(mnist$train$labels),greyprop, geom = "boxplot")
mean(greyprop)
